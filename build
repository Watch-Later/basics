#!/bin/bash
# Copyright - 2015 - Jan Christoph Uhde <Jan@UhdeJC.com>

project_root="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
build_base="${project_root}-build"
export PATH="$build_base/install/bin:$PATH"
build_type="release"
just_make=false
do_clean=false
do_test=false
asan=false
build_prefix="<> "

# source build lib
lib=$project_root/.build_scripts/build_lib
if [[ -f "$lib" ]]; then
    . "$lib"
else
    echo "${build_prefix}unable to source build_lib"
    exit 1
fi

function main(){
section "parse arguments"
args=()
cm_flags=()
while [[ -n "$1" ]]; do
  case "$1" in
    -j|--just-make)
      just_make=true
      shift
    ;;
    -v|--verbose)
      export VERBOSE=1
      export V=1
      shift
    ;;
    -d|--debug)
      build_type="debug"
      shift
    ;;
    -r|--release)
      build_type="release"
      shift
    ;;
    -t|--testing)
      cm_flags+=( '-DCMAKE_TESTING=ON' )
      do_test=true
      shift
    ;;
    -e|--examples)
      cm_flags+=( '-DLIBOBI_EXAMPLES=ON' )
      shift
    ;;
    -c|--clean)
      do_clean=true
      shift
    ;;
    --gcc)
      export CXX=g++
      export CC=gcc
      #cm_flags+=( '-DCMAKE_CXX_COMPILER=g++' )
      shift
    ;;
    --clang)
      export CXX=clang++
      export CC=clang
      #cm_flags+=( '-DCMAKE_CXX_COMPILER=clang++' )
      shift
    ;;
    --travis)
      travis=true
      shift
    ;;
    -cd|--change-directory)
      change_dir=true
      shift
    ;;
    -a|--asan)
      asan=true
      shift
    ;;
    *)
      args+=( "$1" )
      shift
    ;;
  esac
done

section "prepare build"

msg "set build type"
case $build_type in
  release)
    cm_flags+=( '-DCMAKE_BUILD_TYPE=Release' )
  ;;
  debug)
    cm_flags+=( '-DCMAKE_BUILD_TYPE=Debug' )
  ;;
  *)
    ferr "build type $build_type not supported!"
  ;;
esac
build_root="$build_base/$build_type"


msg "create build directories"
if $do_clean; then
  rm -fr $build_root || ferr "failed to clean build dir"
fi

test -d $build_root || mkdir -p $build_root || ferr "failed to create build dir"

msg "create symlinks"
rm -fr $build_base/current
ln -s $build_root $build_base/current

# export vars
export build_prefix
export project_root
export build_root
export build_base
export do_test

## build prepared

"$project_root"/.build_scripts/var_info || exit $?
"$project_root"/.build_scripts/install_3rd_party || exit $?

# calls configure step - e.g. cmake
if ! $just_make || ! [[ -f makefile && -f Makefile ]]; then
  "$project_root/.build_scripts/configure" "${cm_flags[@]}" "${args[@]}" || exit $?
fi

# runs the actual build step - e.g. make
"$project_root"/.build_scripts/build || exit $?

# runs unit tests
if [[ -f "$build_root/.do_test" ]]; then
  "$project_root"/.build_scripts/test || exit $?
fi

if ${change_dir:-false}; then
  msg "starting shell in build directory"
  echo
  exec bash
fi
}

main "$@"
